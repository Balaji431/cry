#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <time.h>
#include<math.h>
uint64_t gcd(uint64_t a, uint64_t b) {
    while (b != 0) {
        uint64_t temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}
uint64_t mod_inverse(uint64_t a, uint64_t m) {
    uint64_t m0 = m, t, q;
    uint64_t x0 = 0, x1 = 1;
    if (m == 1) return 0;
    while (a > 1) {
        q = a / m;
        t = m;
        m = a % m, a = t;
        t = x0;
        x0 = x1 - q * x0;
        x1 = t;
    }
    if (x1 < 0) x1 += m0;
    return x1;
}
void generate_dss_keys(uint64_t *p, uint64_t *q, uint64_t *g, uint64_t *x, uint64_t *y) {
    
    *p = 7879;
    *q = 1019;
    *g = 2;   
    *x = rand() % (*q - 1) + 1;
    *y = mod_inverse(*g, *p);
    *y = (uint64_t)pow(*y,*x) % *p;
}
void sign_dss(uint64_t p, uint64_t q, uint64_t g, uint64_t x, const char *message, uint64_t *r, uint64_t *s) {
    uint64_t k = rand() % (q - 1) + 1;
    *r = (uint64_t)pow(g, k) % p;
    *r = *r % q;
    uint64_t k_inv = mod_inverse(k, q);
    uint64_t hash_message = 0;
    for (int i = 0; message[i] != '\0'; i++) {
        hash_message += message[i];
    }
    *s = (k_inv * (hash_message + x * (*r))) % q;
}
int verify_dss(uint64_t p, uint64_t q, uint64_t g, uint64_t y, const char *message, uint64_t r, uint64_t s) {
    if (r < 1 || r > q - 1 || s < 1 || s > q - 1) {
        return 0;
    }
    uint64_t w = mod_inverse(s, q);
    uint64_t hash_message = 0;
    for (int i = 0; message[i] != '\0'; i++) {
        hash_message += message[i];
    }
    uint64_t u1 = (hash_message * w) % q;
    uint64_t u2 = (r * w) % q;
    uint64_t v1 = (uint64_t)pow(g, u1) % p;
    uint64_t v2 = (uint64_t)pow(y, u2) % p;
    uint64_t v = ((v1 * v2) % p) % q;
    if (v == r) {
        return 1;
    } else {
        return 0;
    }
}
int main() {
    uint64_t p, q, g, x, y;
    uint64_t r, s;
    char message[] = "Hello, world!";
    srand(time(NULL));
    generate_dss_keys(&p, &q, &g, &x, &y);
    printf("Generated DSS keys:\n");
    printf("p: %llu\n", p);
    printf("q: %llu\n", q);
    printf("g: %llu\n", g);
    printf("x: %llu\n", x);
    printf("y: %llu\n", y);
    sign_dss(p, q, g, x, message, &r, &s);
    printf("\nSignature (r, s):\n");
    printf("r: %llu\n", r);
    printf("s: %llu\n", s);
    int verification_result = verify_dss(p, q, g, y, message, r, s);
    if (verification_result) {
        printf("\nSignature verified: Valid\n");
    } else {
        printf("\nSignature verified: Invalid\n");
    }
    return 0;
}
